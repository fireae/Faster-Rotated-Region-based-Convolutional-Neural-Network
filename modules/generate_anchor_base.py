from __future__ import division
import math
import numpy as np
import six


def generate_anchor_base(base_size=16, ratios=[0.5, 1, 2],
                         anchor_scales=[8, 16, 32], angles = [0,math.pi/6,math.pi/3]):
    """Generate anchor base windows by enumerating aspect ratio and scales.

    Generate anchors that are scaled and modified to the given aspect ratios.
    Area of a scaled anchor is preserved when modifying to the given aspect
    ratio.

    :obj:`R = len(ratios) * len(anchor_scales)` anchors are generated by this
    function.
    The :obj:`i * len(anchor_scales) + j` th anchor corresponds to an anchor
    generated by :obj:`ratios[i]` and :obj:`anchor_scales[j]`.

    For example, if the scale is :math:`8` and the ratio is :math:`0.25`,
    the width and the height of the base window will be stretched by :math:`8`.
    For modifying the anchor to the given aspect ratio,
    the height is halved and the width is doubled.

    Args:
        base_size (number): The width and the height of the reference window.
        ratios (list of floats): This is ratios of width to height of
            the anchors.
        anchor_scales (list of numbers): This is areas of anchors.
            Those areas will be the product of the square of an element in
            :obj:`anchor_scales` and the original area of the reference
            window.

    Returns:
        ~numpy.ndarray:
        An array of shape :math:`(R, 5)`.
        Each element is a set of coordinates of a bounding box.
        The second axis corresponds to :obj:`x_min, y_min, x_max, y_max, theta`
        of a bounding box.

    """
    px = base_size / 2.
    py = base_size / 2.

    anchor_base = np.zeros((len(ratios) * len(anchor_scales) * len(angles), 5),
                           dtype=np.float32)
    for i in six.moves.range(len(ratios)):
        for j in six.moves.range(len(anchor_scales)):
            for k in six.moves.range(len(angles)):
                w = base_size * anchor_scales[j] * np.sqrt(1. / ratios[i])
                h = base_size * anchor_scales[j] * np.sqrt(ratios[i])
                index = (i * len(anchor_scales) + j) * len(angles) + k
                anchor_base[index, 0] = px
                anchor_base[index, 1] = py
                anchor_base[index, 2] = w
                anchor_base[index, 3] = h
                anchor_base[index, 4] = angles[k]
    return anchor_base      # (3*3*2) *[x_center, y_center, width, height, angle]

if __name__ == '__main__':
    print generate_anchor_base()